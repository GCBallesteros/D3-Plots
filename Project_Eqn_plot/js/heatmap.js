// Generated by CoffeeScript 1.8.0
(function() {
  var heatmap, pl1,
    __modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

  heatmap = (function() {
    function heatmap() {}

    heatmap.prototype.width = 1200;

    heatmap.prototype.height = 800;

    heatmap.prototype.margin = {
      top: 70,
      right: 70,
      bottom: 70,
      left: 70
    };

    heatmap.prototype.nx = 0;

    heatmap.prototype.ny = 0;

    heatmap.prototype.plot = function() {
      var extX, extY, h, height_tile, i, j, maxZ, minZ, new_val, svg, vx, vy, w, width_tile, xPoints, xScale, yPoints, yScale, zHeight, zScale, _i, _j, _len, _len1;
      w = this.width - this.margin.left - this.margin.right;
      h = this.height - this.margin.top - this.margin.bottom;
      xScale = d3.scale.linear().range([0, w]);
      yScale = d3.scale.linear().range([h, 0]);
      zScale = d3.scale.linear().range(["red", "blue"]);
      xPoints = d3.range(0, 2 * Math.PI, 0.4);
      heatmap.prototype.nx = xPoints.length;
      yPoints = d3.range(0, 2 * Math.PI, 0.4);
      heatmap.prototype.ny = yPoints.length;
      zHeight = math.zeros(this.ny, this.nx);
      minZ = this.func(xPoints[0], yPoints[0]);
      maxZ = this.func(xPoints[0], yPoints[0]);
      for (j = _i = 0, _len = yPoints.length; _i < _len; j = ++_i) {
        vy = yPoints[j];
        for (i = _j = 0, _len1 = xPoints.length; _j < _len1; i = ++_j) {
          vx = xPoints[i];
          new_val = Math.cos(vy) * Math.cos(vx);
          zHeight.valueOf()[j][i] = new_val;
          if (new_val > maxZ) {
            maxZ = new_val;
          }
          if (new_val < minZ) {
            minZ = new_val;
          }
        }
      }
      extX = d3.extent(xPoints);
      extY = d3.extent(yPoints);
      width_tile = (extX[1] - extX[0]) / (this.nx - 1);
      height_tile = (extY[1] - extY[0]) / (this.ny - 1);
      xScale.domain([extX[0] - width_tile / 2, extX[1] + width_tile / 2]);
      yScale.domain([extY[0] - height_tile / 2, extY[1] + height_tile / 2]);
      zScale.domain([minZ, maxZ]);
      svg = d3.select("body").append("svg").attr("width", w + this.margin.left + this.margin.right).attr("height", h + this.margin.top + this.margin.bottom).append("g").attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
      svg.selectAll(".tile").data(heatmap.prototype.flatten(zHeight)).enter().append("rect").attr("class", "tile").attr("x", function(d, i) {
        return xScale(xPoints[heatmap.prototype.idx2row(i)] - width_tile / 2);
      }).attr("y", function(d, i) {
        return yScale(yPoints[heatmap.prototype.idx2col(i)] + height_tile / 2);
      }).attr("width", xScale(width_tile) - xScale(0)).attr("height", yScale(0) - yScale(height_tile)).style("fill", function(d) {
        return zScale(d);
      }).style("stroke", function(d) {
        return zScale(d);
      }).style("stroke-width", "1px");
      return void 0;
    };

    heatmap.prototype.func = function(vx, vy) {
      return Math.cos(vx) * Math.cos(vy);
    };

    heatmap.prototype.idx2row = function(idx) {
      return __modulo(idx, this.nx);
    };

    heatmap.prototype.idx2col = function(idx) {
      return Math.floor(idx / this.nx);
    };

    heatmap.prototype.flatten = function(ar) {
      return [].concat.apply([], ar.valueOf());
    };

    return heatmap;

  })();

  pl1 = new heatmap;

  pl1.plot();

}).call(this);
